#include "Gui.hh"

#include "Network.hh"

Gui::Gui(irr::gui::IGUIEnvironment *env) : env(env), edit_box(NULL)
{
        if(env) {
        	 edit_box = env->addEditBox(L"", irr::core::rect<irr::s32>(CORE_WINDOW_WIDTH - GUI_PAD - GUI_WIDTH, GUI_PAD, CORE_WINDOW_WIDTH - GUI_PAD, GUI_PAD + EDIT_BOX_HEIGHT), true, 0, EDIT_BOX_ID);

                 env->addButton(irr::core::rect<irr::s32>(CORE_WINDOW_WIDTH - GUI_PAD - GUI_WIDTH, GUI_PAD + EDIT_BOX_HEIGHT + GUI_PAD,
                                                      CORE_WINDOW_WIDTH - GUI_PAD - GUI_WIDTH / 2 - GUI_PAD / 2, GUI_PAD + EDIT_BOX_HEIGHT + GUI_PAD + BUTTON_HEIGHT), 0, CONNECT_BOX_ID);

                 env->addButton(irr::core::rect<irr::s32>(CORE_WINDOW_WIDTH - GUI_PAD - GUI_WIDTH / 2 + GUI_PAD / 2, GUI_PAD + EDIT_BOX_HEIGHT + GUI_PAD,
                                                      CORE_WINDOW_WIDTH - GUI_PAD, GUI_PAD + EDIT_BOX_HEIGHT + GUI_PAD + BUTTON_HEIGHT), 0, DISCONNECT_BOX_ID);
        }
}

bool Gui::OnEvent(const irr::SEvent& event)
{
	if(!env || !edit_box)
		return false;

        if (event.EventType == irr::EET_GUI_EVENT)
        {
        	irr::s32 id = event.GUIEvent.Caller->getID();

            	switch(event.GUIEvent.EventType)
            	{
		case irr::gui::EGET_EDITBOX_ENTER:
			if(id == EDIT_BOX_ID)
				return connect();
			else
				break;
		case irr::gui::EGET_BUTTON_CLICKED:
			if(id == CONNECT_BOX_ID)
				return connect();
			else if(id == DISCONNECT_BOX_ID) {
				Network::disconnect();
				return true;
			}
			else
				break;
		default:
			break;
		};
	}

	return false;
}

bool Gui::connect()
{
	if(!edit_box)
		return false;

	const wchar_t *text = edit_box->getText();

	Network::connect(irr::core::stringc(text).c_str());

	return true;
}
